Выполняйте задание.
При возникновении вопросов по заданию пишите нашему менеджеру Александру (e-mail: Aliaksandr_Fedasiuk@epam.com) и дублируете Сергею в CC (e-mail: Siarhei_Berdachuk@epam.com), тем же людям отправляете и готовое задание.

По другим вопросам можно звонить мне или писать в скайпе nataliya_kavaliova (контактные данные ниже).

Литература:

1.            Thinking in Java, 4th edition (классика) http://www.mindview.net/Books/TIJ/
2.            http://download.oracle.com/javase/6/docs/
3.            http://download-llnw.oracle.com/docs/cd/E17409_01/javase/tutorial/
4.            http://download.oracle.com/javase/6/docs/technotes/guides/jdbc/index.html
5.            http://download.oracle.com/docs/cd/E17477_01/javaee/6/tutorial/doc/
6.            http://java.sun.com/blueprints/corej2eepatterns/Patterns/
7.            http://www.javacamp.org/designPattern/
8.            http://static.springsource.org/spring/docs/3.0.x/reference/index.html
9.            http://www.hibernate.org/docs
10.          http://tomcat.apache.org/tomcat-7.0-doc/index.html
11.          http://www.mybatis.org/java.html

Тестовое задание:

1.       Установить Tomcat.
2.       База данных (БД): MySQL, H2, HSQLDB (для тестов использовать «In-memory database mode»).
3.       Установить подключение к БД.
4.       В БД необходимо создать две таблицы: Отделы и Сотрудники.
5.       БД должна заполняться тестовыми данными.
6.       Для отделов хранить название отдела.
7.       Для сотрудников хранить: отдел, ФИО сотрудника, дату его рождения и его зарплату.
8.       Дополнительные фреймворки Spring, MyBatis (если нужен).
9.       Выбрать на свое усмотрение вариант доступа к БД: Spring JDBC или MyBatis реализация.
10.   Написать (и уметь публиковать «руками» на сервер Tomcat) Web-сервис (RESTful или JAX-WS) для доступа к данным, который будет выбирать данные из БД и сохранять/изменять/удалять данные в БД.
11.   Написать (и так же уметь публиковать «руками» на сервер Tomcat) простое Web-приложение для работы с отделами и сотрудниками отделов (технологии для реализации пользовательского интерфейса: Struts, Spring MVC). Данное приложение для работы с БД должно использовать Web-сервис указанный выше (п.10).
12.    Web - приложение должно позволять:
•         посмотреть список отделов и среднюю зарплату (рассчитывается автоматически) по этим отделам (первая списочная форма);
•         список сотрудников в отделах с указанием зарплаты для каждого сотрудника  и полем поиска для поиска сотрудников родившихся в определенную дату или в период между датами (вторая списочная форма);
•         изменять (добавлять/редактировать/удалять) вышеуказанные данные.






13.   Структура проекта: мультипроект с четким разделением на слои и покрытием тестами на каждом уровне:
Пример структуры проекта:
           department-app
 |-model
 |-dao
 |-service
 |-rest
 |-web-app

14.   Проект ОБЯЗАТЕЛЬНО собирать либо с помощью Maven либо- Gradle.
15.   Проект ОБЯЗАТЕЛЬНО должен собираться из командной строки.
16.   Результат сборки приложения - 2 WAR файла:
•         WAR файл для приложения REST-service;
o         model
o         dao
o   services < - > rest
•         WAR файл для приложения c WEB – интерфейсом.
o        model
o        services < - > rest
o        web
17.   Проект должен быть размещен в публичной системе контроля версий GitHub. Ссылку на проект предоставить письмом. Readme проекта должно содержать краткое описание проекта (на Английском), инструкцию о том как из командной строки проект можно собрать и по каким адресам будут доступны модуль сервисов и Web-приложение после установки на сервер Tomcat. Замечание по хранению кода в репозитории: не надо сохранять там папки сборки проекта (target), библиотеки, скомпилированные классы и служебные файлы используемой среды разработки.
18.   При реализации проекта обратите внимание на то, что для вывода отладочной информации используются специальные фреймворки, например log4j. Отладочная информация должна выводиться с уровнем DEBUG в консоль и в отдельный файл.
19.   Особое внимание следует уделить созданию юнит тестов (например junit): Проект без юнит-тестов не считается рабочим даже если визуально он работает. Тесты должны быть на все уровни для public методов (кроме классов модели и простейших get и set методов).
20.   Код не должен содержать "запасных" методов на будущее. Делаем только то, что требуется для поставленной задачи.
21.   Классы и сложные методы должны иметь комментарии в формате Javadoc (и конечно же - на Английском :).

В результате данного проекта мы получим связку из двух Web-приложений (WAR-файлов), которые могут быть установлены на сервер Tomcat. Данная система будет состоять из двух независимых частей: Web-сервис и Web-клиентское приложение, которое использует этот Web-сервис  для отображения  и изменения состояний БД. Оба модуля публикуются на Tomcat и работают в связке.

При переписке указывайте, пожалуйста, свои Имя и Фамилию.
В письмах сохраняйте всю историю переписки.


NATALIYA KAVALIOVA
HR Specialist

Office: +375 22 223 5155 x 54603   Cell: +3 75296566075   Email: nataliya_kavaliova@epam.com
Mogilev, Belarus (GMT+3)   epam.com

